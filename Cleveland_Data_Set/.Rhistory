plot(heart_1$age, heart_1$chol, col=km.out$cluster,pch=km.out$cluster,xlab="Age", ylab="chol")
# plot all countries, with Red Meat on x-axis and White Meat on y-axis,
# using different colors and shapes for different clusters
plot(heart.data$age, heart.data$chol, col=km.out$cluster,pch=km.out$cluster,xlab="Age", ylab="chol")
#display the country name below each point
text(x=heart.data$age+0.5, y=heart.data$chol-1.25,labels=heart_1$num,col=km.out$cluster,pch=km.out$cluster)
#display the country name below each point
text(x=heart.data$age+0.5, y=heart.data$chol-1.25,labels=heart.data$num,col=km.out$cluster,pch=km.out$cluster)
plot(heart.data$age, heart.data$thal, col=km.out$cluster,pch=km.out$cluster,xlab="num", ylab="thal")
#display the country name below each point
text(x=heart.data$num, y=heart.data$thal,labels=heart.data$num,col=km.out$cluster,pch=km.out$cluster)
#display the country name below each point
text(x=heart.data$num, y=heart.data$thal,labels=heart.data$num,col=km.out$cluster,pch=km.out$cluster)
#Age vs thal
plot(heart.data$age, heart.data$thal, col=km.out$cluster,pch=km.out$cluster,xlab="num", ylab="thal")
#display the country name below each point
text(x=heart.data$num, y=heart.data$thal,labels=heart.data$num,col=km.out$cluster,pch=km.out$cluster)
heart.data$num[km.out$cluster==2]
count(heart.data$num[km.out$cluster==2] && heart.data$num>=1)
heart.data$num[km.out$cluster==2] && heart.data$num>=1
heart.data$num[km.out$cluster==2]
heart.data$num[km.out$cluster==2]>=1
h1=if(heart.data$num[km.out$cluster==2]>=1,1,0)
h1=ifelse(heart.data$num[km.out$cluster==2]>=1,1,0)
h1
count(h1=1)
length(which(h1=1))
length(which(h1==1))
length(which(h1==0))#100
h2=ifelse(heart.data$num[km.out$cluster==1]>=1,1,0)
length(which(h2==1))#100
length(which(h2==0))#31
#Creating the dataset
heart.data <- read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Project/processed.cleveland.data",sep=",",na.strings = '?')
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
heart.data <- na.omit(heart.data)
# set random seed so that our results are reproducible
RNGkind(sample.kind = "Rounding")
set.seed(1)
View(heart.data)
View(heart.data)
#Clustering for age,sex,chol,bp
heart_1 = scale(heart.data[,c(1,2,3,4,7,8,9,10,12,13)])
#K means clustering
km.out=kmeans(heart_1,2,nstart=20)
km.out
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out$cluster==2]>=1,1,0)
length(which(h1==1))#100
length(which(h1==0))#31
length(which(h2==1))#37
length(which(h2==0))#100
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out$cluster==2]>=1,1,0)
length(which(h1==1))#100
length(which(h1==0))#31
h2=ifelse(heart.data$num[km.out$cluster==1]>=1,1,0)
length(which(h2==1))#37
length(which(h2==0))#100
mean(heart.data$num[km.out$cluster==1])
mean(heart.data$age[km.out$cluster==1])
mean(heart.data$age[km.out$cluster==2])
h1
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out$cluster==1]>=1,1,0)
length(which(h1==1))#100
length(which(h1==0))#31
h2=ifelse(heart.data$num[km.out$cluster==2]>=1,1,0)
length(which(h2==1))#37
length(which(h2==0))#100
# setting directory
heart.data <- read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Project/processed.cleveland.data",sep=",",na.strings = '?')
library(class)
library(glmnet)
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
heart.data <- na.omit(heart.data)
#converting to factors
heart.data_1$sex<-as.factor(heart.data$sex)
heart.data_1$cp<-as.factor(heart.data$cp)
heart.data_1$fbs<-as.factor(heart.data$fbs)
heart.data_1$restecg<-as.factor(heart.data$restecg)
heart.data_1$exang<-as.factor(heart.data$exang)
heart.data_1$slope<-as.factor(heart.data$slope)
heart.data_1$ca<-as.factor(heart.data$ca)
heart.data_1$thal<-as.factor(heart.data$thal)
heart.data_1$num<-as.factor(heart.data$num)
heart.data_1 = heart.data
#converting to factors
heart.data_1$sex<-as.factor(heart.data$sex)
heart.data_1$cp<-as.factor(heart.data$cp)
heart.data_1$fbs<-as.factor(heart.data$fbs)
heart.data_1$restecg<-as.factor(heart.data$restecg)
heart.data_1$exang<-as.factor(heart.data$exang)
heart.data_1$slope<-as.factor(heart.data$slope)
heart.data_1$ca<-as.factor(heart.data$ca)
heart.data_1$thal<-as.factor(heart.data$thal)
heart.data_1$num<-as.factor(heart.data$num)
#Splitting the data into training and testing
testing = sample(1:nrow(heart.data_1), 99)
training = -testing
testing_data = heart.data_1[testing,]
training_data = heart.data_1[training,]
# creating matrixes and vector of response variables for training data
factors_training_1 = model.matrix(chol~.,data=training_data)[,-1]
response_training_1 = training_data$chol
#running lasso on training data
lasso = cv.glmnet(factors_training_1, response_training_1, alpha = 1, family = "binomial")
set.seed(1)
testing_1 = sample(1:nrow(heart.data), 99)
training_1 = -testing
heart = heart.data
testing_data_1 = heart[testing_1,]
training_data_1 = heart[training_1,]
chol.lm=lm(chol~-num , data=training_data_1)
summary(chol.lm)
chol.lm=lm(chol~.-num , data=training_data_1)
summary(chol.lm)
response_testing_1 = heart$chol[testing_1]
#predicting the response for test variables
pred1 = predict(chol.lm, testing_data_1)
#Checking RSS
mean((pred1 - response_testing_1)^2)
bp.lm=lm(trestbps~.-num , data=training_data_1)
summary(bp.lm)
#Checking RSS
mean((pred2 - response_testing_2)^2)
#predicting the response for test variables
pred2 = predict(bp.lm, testing_data_1)
response_testing_2 = heart$trestbps[testing_1]
#Checking RSS
mean((pred2 - response_testing_2)^2)
heart.data <- read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Project/processed.cleveland.data",sep=",",na.strings = '?')
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
heart.data = na.omit(heart.data)
#Creating a copy of the data Frame
heart.data_1 = heart.data
#Select all values of num greater than 0 as 1
heart.data_1$num[heart.data$num > 0] <- 1
table(heart.data_1$num)
table(heart.data_1$num, heart.data_1$sex)
table(heart.data_1$num, heart.data_1$trestbps)
#Plots for different combinations
boxplot(heart.data$chol~heart.data_1$num,xlab = "Disease",ylab = "cholestrol")
#Plots for different combinations
boxplot(heart.data$chol~heart.data_1$num,xlab = "Disease",ylab = "cholestrol",title="Cholestrol and Occurance of Disease")
#Plots for different combinations
boxplot(heart.data$chol~heart.data_1$num,xlab = "Disease",ylab = "cholestrol",title="Cholestrol and Occurance of Disease")
#Plots for different combinations
boxplot(heart.data$chol~heart.data_1$num,xlab = "Disease",ylab = "cholestrol",main="Cholestrol and Occurance of Disease")
boxplot(heart.data$trestbps~heart.data_1$num,xlab = "Disease",ylab = "bp",main="Blood Pressure and Occurance of Disease")
xyplot(heart.data$num~heart.data$age)
plot(heart.data$num~heart.data$age)
plot(heart_1$num~heart.data$age)
plot(heart.data_1$num~heart.data$age)
plot(heart.data_1$age~heart.data_1$num)
boxplot(heart.data_1$age~heart.data_1$num)
boxplot(heart.data_1$age~heart.data_1$num,xlab = "Disease",ylab = "bp",main="Ageand Occurance of Disease")
aggregate(num ~ chol + sex, data=heart.data_1, FUN=sum)
aggregate(num ~ chol + sex, data=heart.data_1, FUN=length)
aggregate(num ~ age + sex, data=heart.data_1, FUN=sum)
aggregate(num ~ age + sex + chol + trestbps, data=heart.data_1, FUN=sum)
aggregate(num ~ age + sex + chol, data=heart.data_1, FUN=sum)
aggregate(num ~ age + sex, data=heart.data_1, FUN=sum)
aggregate(num ~ age + sex, data=heart.data_1, FUN=length)
aggregate(num ~ age + sex, data=heart.data_1, FUN=sum)
aggregate(num ~ age + sex, data=heart.data_1, FUN=length)
aggregate(num ~ age + sex, data=heart.data_1, FUN=f(x) sum(x)/length(x))
aggregate(num ~ age + sex, data=heart.data_1, FUN=function(x) {sum(x)/length(x)})
aggregate(num ~ age + sex, data=heart.data_1, FUN=length)
#Finding the age group with the highest number of heart diseases
aggregate(num ~ age + sex, data=heart.data_1, FUN=sum)
aggregate(num ~ age + sex, data=heart.data_1, FUN=function(x) {sum(x)/length(x)})
boxplot(heart.data$chol~heart.data_1$thal,xlab = "Disease",ylab = "thal")
boxplot(heart.data$num~heart.data_1$thal,xlab = "Disease",ylab = "thal")
boxplot(heart.data$num~heart.data_1$thal,xlab = "Thalasimia",ylab = "number of diseases",main="Thalassemia and Occurance of Disease")
boxplot(heart.data_1$num~heart.data_1$thal,xlab = "Thalasimia",ylab = "number of diseases",main="Thalassemia and Occurance of Disease")
set.seed(1)
testing_1 = sample(1:nrow(heart.data), 99)
training_1 = -testing
heart = heart.data
testing_data_1 = heart[testing_1,]
training_data_1 = heart[training_1,]
chol.lm=lm(chol~.-num , data=training_data_1)
summary(chol.lm)
response_testing_1 = heart$chol[testing_1]
#predicting the response for test variables
pred1 = predict(chol.lm, testing_data_1)
#Checking RSS
mean((pred1 - response_testing_1)^2)
bp.lm=lm(trestbps~.-num , data=training_data_1)
summary(bp.lm)
plot(bp.lm$res ~ bp.lm$fitted)
#predicting the response for test variables
pred2 = predict(bp.lm, testing_data_1)
response_testing_2 = heart$trestbps[testing_1]
#Checking RSS
mean((pred2 - response_testing_2)^2)
boxplot(heart.data_1$num~heart.data_1$thal,xlab = "Thalassemia",ylab = "number of diseases",main="Thalassemia and Occurance of Disease")
boxplot(heart.data_1$thal~heart.data_1$chol,xlab = "Thalassemia",ylab = "number of diseases",main="Thalassemia and Occurance of Disease")
boxplot(heart.data_1$chol~heart.data_1$thal,xlab = "Thalassemia",ylab = "number of diseases",main="Thalassemia and Occurance of Disease")
boxplot(heart.data_1$bp~heart.data_1$thal,xlab = "Disease",ylab = "bp",main="Age and Occurance of Disease")
boxplot(heart.data_1$trestbps~heart.data_1$thal,xlab = "Disease",ylab = "bp",main="Age and Occurance of Disease")
boxplot(heart.data_1$trestbps~heart.data_1$thal,xlab = "Thalassemia",ylab = "BP",main="Thalassemia and Blood Pressur Levels")
boxplot(heart.data_1$trestbps~heart.data_1$thal,xlab = "Thalassemia",ylab = "BP",main="Thalassemia and Blood Pressure Levels")
boxplot(heart.data_1$chol~heart.data_1$thal,xlab = "Thalassemia",ylab = "Cholestrol",main="Thalassemia and Cholestrol Levels")
boxplot(heart.data_1$trestbps~heart.data_1$thal,xlab = "Thalassemia",ylab = "BP",main="Thalassemia and Blood Pressure Levels")
#Presence of heart disease and cholestrol levels
boxplot(heart.data$cp~heart.data$num,xlab = "Disease",ylab = "cp")
#Presence of heart disease and cholestrol levels
boxplot(heart.data$cp~heart.data_1$num,xlab = "Disease",ylab = "cp")
#Presence of heart disease and cholestrol levels
boxplot(heart.data$cp~heart.data_1$num,xlab = "Disease",ylab = "cp", Main="Chest pain and Presence of disease")
#Presence of heart disease and cholestrol levels
boxplot(heart.data$cp~heart.data_1$num,xlab = "Disease",ylab = "cp", Main="Chest pain and Presence of disease")
#Presence of heart disease and cholestrol levels
boxplot(heart.data$cp~heart.data_1$num,xlab = "Disease",ylab = "cp", main="Chest pain and Presence of disease")
plot(heart.data$fbs ~ heart.data_1$num,xlab = "Disease",ylab = "High sugar")
#Plots for different combinations
#Presence of heart disease and Cholesterol levels
boxplot(heart.data$chol~heart.data_1$num,xlab = "Disease",ylab = "Cholesterol",main="Cholesterol and Occurance of Disease")
#Presence of Thalassemia and Cholesterol
boxplot(heart.data_1$chol~heart.data_1$thal,xlab = "Thalassemia",ylab = "Cholesterol",main="Thalassemia and Cholesterol Levels")
# Loading the data
heart.data <- read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Project/processed.cleveland.data",sep=",",na.strings = '?')
library(class)
library(glmnet)
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
heart.data <- na.omit(heart.data)
heart.data_1 = heart.data
heart.data_1$sex<-as.factor(heart.data$sex)
heart.data_1$cp<-as.factor(heart.data$cp)
heart.data_1$fbs<-as.factor(heart.data$fbs)
heart.data_1$restecg<-as.factor(heart.data$restecg)
heart.data_1$exang<-as.factor(heart.data$exang)
heart.data_1$slope<-as.factor(heart.data$slope)
heart.data_1$ca<-as.factor(heart.data$ca)
heart.data_1$thal<-as.factor(heart.data$thal)
heart.data_1$num<-as.factor(heart.data$num)
set.seed(1)
testing = sample(1:nrow(heart.data_1), 99)
training = -testing
testing_data = heart.data_1[testing,]
training_data = heart.data_1[training,]
km.out
km.out$centers
#Summary of thal values
table(heart.data$thal[km.out$centers==1])
heart.data$thal[km.out$centers==1]
km.out$withinss
# After setting your working directory, read the data from protein.csv
# into a data.frame called food
food <- read.csv( "C:/Users/achal/Desktop/Carey/Data Analytics/Data/protein.csv" )
# set random seed so that our results are reproducible
RNGkind(sample.kind = "Rounding")
set.seed(1)
# store the white and red meat consumptions in a separate data.frame called food2
food2<-food[,c(2,3)]
# cluster the contries based on white and red meat consumption
# form three clusters and use 10 initializations
# store the results in a variable called Meats
Meats <- kmeans(food2,3,nstart=10)
Meats
#Creating the dataset
heart.data <- read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Project/processed.cleveland.data",sep=",",na.strings = '?')
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
heart.data <- na.omit(heart.data)
# set random seed so that our results are reproducible
RNGkind(sample.kind = "Rounding")
set.seed(1)
heart_1 = scale(heart.data[,c(1,2,3,4,7,8,9,10,12,13)])
#Clustering for age,sex,cp,bp,ecg,thalach,exang,peak,slope,ca,thal
heart_1 = scale(heart.data[,c(1,2,3,4,7,8,9,10,12,13)])
#K means clustering
km.out=kmeans(heart_1,5,nstart=20)
km.out$centers
km.out$withinss
km.out
#Clustering for age,sex,cp,bp,ecg,thalach,exang,peak,slope,ca,thal
heart_1 = scale(heart.data[,c(1,2,3,4,7,8,9,10,12,13)])
#K means clustering
km.out=kmeans(heart_1,2,nstart=20)
km.out$centers
km.out$withinss
km.out
#K means clustering
km.out=kmeans(heart_1,2,nstart=20)
km.out$betweenss
heart.clust=hclust(dist(heart_1),method="complete")
km.out=cutree(heart.clust,2)
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out$cluster==1]>=1,1,0)
km.out
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out$cluster==1]>=1,1,0)
heart.clust=hclust(dist(heart_1),method="complete")
km.out=cutree(heart.clust,2)
km.out
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out==1]>=1,1,0)
length(which(h1==1))#31
length(which(h1==0))#143
length(which(h2==1))#106
h2=ifelse(heart.data$num[km.out==2]>=1,1,0)
length(which(h2==1))#106
length(which(h2==0))#16
#Find the mean age of customers for both the clusters
mean(heart.data$age[km.out==1])
mean(heart.data$age[km.out==2])
#Determining the ratio of sexes
h3=ifelse(heart.data$sex[km.out==2]==1,'Male','Female')
table(h3)
h4=ifelse(heart.data$sex[km.out==1]==1,'Male','Female')
table(h4)
#Find the mean cholestrol levels of customers for both the clusters
mean(heart.data$chol[km.out==1])
mean(heart.data$chol[km.out==2])
#Find the mean BP levels of customers for both the clusters
mean(heart.data$trestbps[km.out==1])
mean(heart.data$trestbps[km.out==2])
#Check for presence of Sugar
h5=ifelse(heart.data$sex[km.out==1]==1,'Yes','No')
table(h5)
h6=ifelse(heart.data$sex[km.out==2]==1,'Yes','No')
table(h6)
#Determining the ratio of ECG
table(heart.data$restecg[km.out==1])
table(heart.data$restecg[km.out==2])
#Thalach levels
mean(heart.data$thalach[km.out==1])
mean(heart.data$thalach[km.out==2])
#SUmmary of Exang data
h7=ifelse(heart.data$exang[km.out==1]==1,'1','0')
table(h7)
h7=ifelse(heart.data$exang[km.out==2]==1,'1','0')
table(h7)
#Summary of Peak
mean(heart.data$oldpeak[km.out==1])
mean(heart.data$oldpeak[km.out==2])
#Summary of CA values
table(heart.data$ca[km.out==1])
table(heart.data$ca[km.out==2])
#Summary of thal values
table(heart.data$thal[km.out==1])
table(heart.data$thal[km.out==2])
#Clustering for age,sex,cp,bp,ecg,thalach,exang,peak,slope,ca,thal
heart_1 = scale(heart.data[,c(1,2,3,4,7,8,9,10,12,13,14)])
#Performing Heirachial clustering
heart.clust=hclust(dist(heart_1),method="complete")
km.out=cutree(heart.clust,2)
#Find the mean age of customers for both the clusters
mean(heart.data$age[km.out==1])
mean(heart.data$age[km.out==2])
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out==1]>=1,1,0)
length(which(h1==1))#31
length(which(h1==0))#143
length(which(h2==1))#106
length(which(h2==0))#16
#Performing Heirachial clustering
heart.clust=hclust(dist(heart_1),method="complete")
km.out=cutree(heart.clust,2)
km.out
#Cluster 2- 131 and cluster 1-165
h1=ifelse(heart.data$num[km.out==1]>=1,1,0)
length(which(h1==1))#31
length(which(h1==0))#143
h2=ifelse(heart.data$num[km.out==2]>=1,1,0)
length(which(h2==1))#106
length(which(h2==0))#16
#Find the mean age of customers for both the clusters
mean(heart.data$age[km.out==1])
mean(heart.data$age[km.out==2])
#Determining the ratio of sexes
h3=ifelse(heart.data$sex[km.out==2]==1,'Male','Female')
table(h3)
h4=ifelse(heart.data$sex[km.out==1]==1,'Male','Female')
table(h4)
#Cholestrol VS age
plot(heart.data$age, heart.data$chol, col=km.out$cluster,pch=km.out,xlab="Age", ylab="chol")
#Cholestrol VS age
plot(heart.data$age, heart.data$chol, col=km.out,pch=km.out,xlab="Age", ylab="chol")
#display the presence of heart disease for each point
text(x=heart.data$age+0.5, y=heart.data$chol-1.25,labels=heart.data$num,col=km.out,pch=km.out)
#Age vs blood pressure
plot(heart.data$trestbps, heart.data$age,col=km.out,pch=km.out,xlab="BP", ylab="Age")
#display the presence of heart disease for each point
text(x=heart.data$trestbps, y=heart.data$age-0.5,labels=heart.data$num,col=km.out,pch=km.out)
heart.data$num = ifelse(heart.data$num>=1,1,0)
#Age vs blood pressure
plot(heart.data$trestbps, heart.data$age,col=km.out,pch=km.out,xlab="BP", ylab="Age")
#display the presence of heart disease for each point
text(x=heart.data$trestbps, y=heart.data$age-0.5,labels=heart.data$num,col=km.out,pch=km.out)
installed.packages('tidyverse','readxl')
install.packages('tidyverse','ggplot2')
install.packages('tidyverse')
install.packages(c("ggplot2", "rpart", "rpart.plot", "randomForest", "e1071", "pROC"))
set.seed(10)
logRegModel <- train(num ~ ., data=trainData, method = 'glm', family = 'binomial')
#Loading necessary library
library(glmnet)
#Setting the working directory to point to the dataset
setwd("C:/Users/achal/Desktop/Carey/Data Analytics/Code/R-coding/Cleveland_Data_Set")
#1
#Reading the data and converting any blank values to na
heart.data <- read.csv("processed.cleveland.data",header=FALSE, sep=",",na.strings = '?')
#Adding column name to the dataset
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
#Removing the NA values
heart.data <- na.omit(heart.data)
heart.data
#Updating all heart conditions to value of 1
heart.data$num[heart.data$num > 0] <- 1
#converting to factors
heart.data$sex<-as.factor(heart.data$sex)
heart.data$cp<-as.factor(heart.data$cp)
heart.data$fbs<-as.factor(heart.data$fbs)
heart.data$restecg<-as.factor(heart.data$restecg)
heart.data$exang<-as.factor(heart.data$exang)
heart.data$slope<-as.factor(heart.data$slope)
heart.data$ca<-as.factor(heart.data$ca)
heart.data$thal<-as.factor(heart.data$thal)
heart.data$num<-as.factor(heart.data$num)
#Viewing the dataset
str(heart.data)
#2
#install.packages('caret')
#Splitting the dataset in the ratio 70:30 using createdatapartition function
#library caret has the function createDataPartition which can be used to split the dataset
library(caret)
set.seed(10)
inTrainRows <- createDataPartition(heart.data$num,p=0.7,list=FALSE)
trainData <- heart.data[inTrainRows,]
testData <-  heart.data[-inTrainRows,]
#Running Logistic Regression on the output.
logreg.fit <- glm(num~.,data=trainData,family=binomial)
summary(logreg.fit)
#3
#Running Prediction
logreg.fit.prob=predict(logreg.fit,testData,type="response")
#Error is displayed sice restecg has a new level in the test dataset.
#Only sex,chestpain,thalach,slope,ca and thal are significant according to the model. Dropping all other
#predictors and rerunning the model
#Running Logistic Regression on the output.
logreg.fit2 <- glm(num~sex+cp+thalach+slope+ca+thal,data=trainData,family=binomial)
summary(logreg.fit2)
#Rerunning Prediction
logreg.fit.prob=predict(logreg.fit2,testData,type="response")
View(logreg.fit.prob)
set.seed(10)
logRegModel <- train(num ~ ., data=trainData, method = 'glm', family = 'binomial')
#Determining the probability of heartdisease
logRegPredictionprob <- predict(logRegModel, testData, type='prob')[2]
#Loading necessary library
library(glmnet)
#Setting the working directory to point to the dataset
setwd("C:/Users/achal/Desktop/Carey/Data Analytics/Code/R-coding/Cleveland_Data_Set")
#1
#Reading the data and converting any blank values to na
heart.data <- read.csv("processed.cleveland.data",header=FALSE, sep=",",na.strings = '?')
#Adding column name to the dataset
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
#Removing the NA values
heart.data <- na.omit(heart.data)
heart.data
#Updating all heart conditions to value of 1
heart.data$num[heart.data$num > 0] <- 1
heart.data$sex<-as.factor(heart.data$sex)
heart.data$cp<-as.factor(heart.data$cp)
heart.data$fbs<-as.factor(heart.data$fbs)
heart.data$restecg<-as.factor(heart.data$restecg)
heart.data$exang<-as.factor(heart.data$exang)
heart.data$slope<-as.factor(heart.data$slope)
heart.data$ca<-as.factor(heart.data$ca)
heart.data$thal<-as.factor(heart.data$thal)
heart.data$num<-as.factor(heart.data$num)
#Viewing the dataset
str(heart.data)
library(caret)
set.seed(10)
inTrainRows <- createDataPartition(heart.data$num,p=0.7,list=FALSE)
trainData <- heart.data[inTrainRows,]
testData <-  heart.data[-inTrainRows,]
logreg.fit <- glm(num~.,data=trainData,family=binomial)
summary(logreg.fit)
#3
#Running Prediction
logreg.fit.prob=predict(logreg.fit,testData,type="response")
logreg.fit2 <- glm(num~sex+cp+thalach+slope+ca+thal,data=trainData,family=binomial)
summary(logreg.fit2)
#Running Logistic Regression on the output.
logreg.fit2 <- glm(num~sex+cp+thalach+slope+ca+thal,data=trainData,family=binomial)
summary(logreg.fit2)
#Rerunning Prediction
logreg.fit.prob=predict(logreg.fit2,testData,type="response")
#4
#Running k fold Cross Validationfor the entire dataset.
#Library boot contains the function cv.glm for running cross validation on Logistic regression model.
library(boot)
set.seed(10)
#Logistic regression on the entire dataset.
logreg.fit3 = glm(num~.,data=heart.data,family='binomial')
#Running k cross validation with k =10 using cv.glm
cv.out=cv.glm(heart.data,logreg.fit3)
#Misclassification error
cv.out$delta
