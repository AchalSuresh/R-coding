# We can also pick the elements of a vector that satisfies a certain logic condition. We give examples below. First, set x = (1,.,10)
x = 1:10
# try summary(x) to see the information it summarizes about the vector
summary(x)
# generate logical vector y by setting y = x > 5. try summary(y) to see the information it summarizes about the vector y
y = x > 5
summary(y)
# suppose we wanted to pick the elements of x that are greater than 5. Here is how we could do it.
x[y]
# suppose we wanted to pick the elements of x that are not greater than 5. Here is how we could do it. "!" is the "not" logical operator in R.
x[!y]
# create a vector of character strings
country <- c("US", "UK", "China", "India", "Japan", "Korea")
# Currently, "country" is just a vector of text. Let's convert the vector "country" to a factor. Print both countryf and country on screen and see how they compare.
countryf <- factor(country)
countryf
country
# try converting the factor countryf to numeric vector
as.numeric(countryf)
# try converting the vector country to numeric vector and see how the result compares to the previous one
as.numeric(country)
# generate a vector of numbers 1 through 6
aa = 1:6
# store the contents of aa in a 2 by 3 matrix and print aa on screen to see the output
dim(aa) <- c(2,3)
aa
# generate two vectors, a = (1,.,5) and b is 5 randomly generated numbers from the standard normal distribution.
a <- 1:5
b <- rnorm(5)
# generate a matrix, named c.matrix, by binding a and b together as columns
c.matrix <- cbind(a,b)
# display the row names and column names of the matrix c.matrix
rownames(c.matrix)
colnames(c.matrix)
# display the element in the fourth row, second column of c.matrix
c.matrix[4,2]
# display the first row of c.matrix
c.matrix[1,]
# display the second column of c.matrix
c.matrix[,2]
# generate two vectors, a = (1,.,5) and b is 5 randomly generated numbers from the standard normal distribution.
a <- 1:5
b <- rnorm(5)
b
a
# generate a matrix, named c.matrix, by binding a and b together as columns
c.matrix <- cbind(a,b)
# display the row names and column names of the matrix c.matrix
rownames(c.matrix)
colnames(c.matrix)
# display the element in the fourth row, second column of c.matrix
c.matrix[4,2]
c
View(c.matrix)
# display the first row of c.matrix
c.matrix[1,]
# display the second column of c.matrix
c.matrix[,2]
# Here is another example of matrix operations. Generate six random numbers from the standard normal distribution and store them in a matrix with three rows
m.normal = matrix(rnorm(6),nrow=3)
# Obtain matrix m2 by multiplying each element of m.normal by 10 and print the matrix m2 on screen
m2 = m.normal *10
m2
# add 50 to each element in the second column of m2
m2[,2] = m2[,2]+50
# use summary() function to summarize the information in matrix m2
summary(m2)
# Next we go through a few operations to observe the difference between a matrix and a data frame. First, generate a vector x of numbers 1 through 10 and a vector y with 10 random numbers from the standard normal distribution
x = 1:10
y = rnorm(10)
# form matrix mat by binding the two vectors as columns
mat <- cbind(x,y)
View(mat)
# display the class of the first column of mat - you will see that it is "numeric"
class(mat[,1])
# form vector z with elements "a1","a2",., "a10" by using the "paste()" function
z = paste("a", 1:10)
# form vector z with elements "a1","a2",., "a10" by using the "paste0()" function. Note that paste leaves a space between the letter and the number while paste0 does not.
z = paste0("a", 1:10)
# form a matrix called tab by binding x,y,z as columns
tab <- cbind(x,y,z)
# display the class of tab - it should be "matrix"
class(tab)
# display the class of the first column of tab, which is the vector x - you will see that it is "character". It used to be "numeric" but when we combined x and y with "character" vector z to form a matrix, R forced x and y to become "character" vectors also, because a matrix must have vectors of the same type.
class(tab[,1])
# now generate a data frame called tab, by using x, y, z as columns again
tab <- data.frame(x,y,z)
# form a matrix called tab by binding x,y,z as columns
tab <- cbind(x,y,z)
View(tab)
# now generate a data frame called tab, by using x, y, z as columns again
tab <- data.frame(x,y,z)
# display the class of tab - you should see "data.frame"
class(tab)
# display the first six rows of the data frame called tab - head() function does that
head(tab)
# display the class (or mode) of the first column of tab, which is vector - you should see "numeric". Notice that R did not force x to become a character vector when we combined x, y, and z to form a data.frame.
mode(tab[,1])
# display the row names of the data frame
rownames(tab)
# change the row names so they are called row1, row2, etc.
rownames(tab) <- paste0("row", 1:10)
# Next we give more examples of data.frame operations. To refer to a column of a data frame, you can use the $ operator. For example, to refer to column x of data frame tab, we write:
tab$x
# display the column names of tab
colnames(tab)
# change the column names to "a", "b", "c"
colnames(tab) <- c("a","b","c")
# change the column names to "col1", "col2", "col3"
colnames(tab) <- paste0("col",1:3)
# a "list" is a collection of objects that may have the same or different types. We create a list below
x = list(1, "y",c(2,4,6))
View(x)
# check the length of x - you will see that it consists of 3 objects
length(x)
# check the class of x - it should be "list"
class(x)
# here is how we refer to the second element of the list
x[[2]]
# a data.frame is a special list, whose column vectors are matched. Check if the data.frame tab, which we created earlier, is a list. We use the is.list logical operator, which should return TRUE.
is.list(tab)
# print the second element of the list tab, which is a vector
tab[[2]]
View(tab)
# generate 50 random numbers from the standard normal distribution
x = rnorm(50)
# generate a sequence of 50 numbers evenly spread between 0 and 100
y = seq(from=0, to=100, length.out=50)
# plot x against y
plot(x, y, xlab="x normal random", ylab="y sequence", main="plot test", pch=5, col=4)
# R can have multiple graphic "devices" open - the window in your R console, the window in your R Studio, .png file, etc. To see a list of active devices:
dev.list()
# To close the most recent device:
dev.off()
# To close device 3
dev.off(3)
# To use device 2
dev.set(2)
# to make a plot directly to a file, we can use functions png(), postscript, etc. For example, the following comments together will create a plot of y versus x and save it in file myplot.png
x<-rnorm(30)
getwd()
#You will find the plot in the file above
png('my.first.plot.png',width=480,height=360)
plot(x)
#close the device to retrieve the image
dev.off()
#Boxplots
x=rpois(lambda=10,50)
#create a multi-paneled set of boxplots
par(mfrow=c(2,2))
boxplot(x)
boxplot(log(x))
#Boxplots
x=rpois(lambda=10,50)
#create a multi-paneled set of boxplots
par(mfrow=c(2,2))
boxplot(x)
boxplot(log(x))
boxplot(x^2)
#create a multi-paneled set of boxplots
par(mfrow=c(1,1))
boxplot(x)
boxplot(log(x))
boxplot(x^2)
boxplot(2*x)
# here is some basic information about reading data. When we use function read.table(.), the data in "." is stored  as a data frame. Use fix() to view the data in a spreadsheet-like window. Use function read.cvs('filename.cvs') to read data into R from the file "filename.cvs" Setting header = TRUE tells R that the first line contains the variable names. Setting na.strings='.' tells R that whenever it sees ".", it should be treated as a missing element. For example, the following command will read the file Auto.csv into data.frame Auto, treating ?s in the file as missing elements.
#You must have csv files named "Auto" and "Test" in your working directory. Use getwd() to check your working directory. Click on "Session/Set Working Directory/Choose Directory" for R to know the location of your csv files
Auto = read.csv("Auto.csv", header=TRUE, na.strings="?")
Test = read.table('Test.csv', header=FALSE, sep=',')
#######################################
# Next we review what R can do with probability distributions like normal or Uniform. Each distribution has a name in R: Normal is norm, Uniform is unif, Binomial is binom, Poisson is pois, Student's is t, F is f, and Ch-squared is chisq. The prefix d followed by the distribution name computes density. The prefix p computes the cumulative distribution function, the prefix q computes the quantile, and the prefix r generates random variables. We give examples for Uniform below.
# For a random variable that is uniformly distributed between 5 and 15, compute the density at x = 8
dunif(8, min=5, max=15)
# For a random variable that is uniformly distributed between 5 and 15, compute the cumulative distribution function at x = 8 (i.e., the probability that the random variable's value is 8 or less)
punif(10, min=5, max=15)
# For a random variable that is uniformly distributed between 5 and 15, compute the 0.8 quantile, i.e., find x such that 80% of the distribution lies below it
qunif(.8, min=5, max=15)
# Generate 10 values drawn at random from a uniform distribution between 5 and 15
runif(10, min=5, max=15)
#######################################
# The next example shows the role of function set.seed(): Setting a seed ensures reproducible results from random processes in R. For example, set the seed to 5 and generate 3 random values from the normal distribution with mean = 10 and standard deviation = 20:
set.seed(5)
rnorm(3, mean=10, sd=20)
# generate another 3 numbers from the same distribution, without setting a seed. Are they the same numbers as you generated earlier?
rnorm(3, mean=10, sd=20)
# now set the seed to 5 and generate 3 numbers from the same distribution again. Are they the same numbers as you generated above?
set.seed(5)
rnorm(3, mean=10, sd=20)
#######################################
# The next example is about the sample function
# Use sample function to pick five numbers at random from the set {1, ., 40}
sample(1:40, 5)
# By default, sample picks random elements without replacement, i.e., no number appears twice. If you want to allow replacement, here is an example:
#generate ten flips of a coin, with H for heads and T for tails
sample(c('H','T'), 10, replace=TRUE)
# What if we want to sample outcomes with different probabilities. For example, generate ten random occurrences of "success" and "failure" with success having 80% probability and failure having 20% probability
sample(c('success','failure'), 10, replace=TRUE, prob=c(0.8,0.2))
#######################################
# we can also define our own functions in R, using function(). For example, define a function g(x) = 3*x^-4 and see what it returns for x = 2
g <- function(x){3*x^(-4)}
g(2)
# Next we want R to read the data set we want to work with. In R Studio, on the top-right pane, click "Import Dataset." Browse to titanic.csv and select it. Click "Import".
titanic <- read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Data/titanic.csv")
# When R reads a .csv file, it stores the data into an object type called a "data frame." Let's check what types of variables we have in titanic. We use "str" command.
str(titanic)
# Let's use prop.table so that the proportions add up to 100% in each row. Use prop.table(...,2) to make proportions add up to 100% in each column
prop.table(table(titanic$Sex, titanic$Survived),1)
help("summary.connection")
summary(titanic$Age)
summary(titanic$Sex)
View(titanic)
summary(titanic$Name)
clear
clear()
# We can also create a multi dimensional table, say a table that distributes the passengers according to their gender and whether they survived or not.
titanic_summ <- table(titanic$Sex, titanic$Survived)
titanic_summ
# Let's convert the numbers into proportions.
prop.table(table(titanic$Sex, titanic$Survived))
# Let's use prop.table so that the proportions add up to 100% in each row. Use prop.table(...,2) to make proportions add up to 100% in each column
prop.table(table(titanic$Sex, titanic$Survived),1)
summary(titanic$Name)
# We will add another column to our data frame. This column will be titled "Child" and it will be equal to 1 if the passenger is less than 18 years old and 1 otherwise.
titanic$Child=0
titanic$Child[titanic$Age<18]=1
# We will use "aggregate" function to count how many passengers survived, grouping the passengers according to their gender and whether or not they were children.  The "aggregate" function divides the data into groups according to the variable to the right of "~" and applies the function specified in "FUN" to the variable to the left of "~". In this case, it will add the numbers (0s and 1s in the Survived column) for four different groups of passengers: Male children, female children, male adults, female adults.
aggregate(Survived ~ Child + Sex, data=titanic, FUN=sum)
# We will use "aggregate" function again, this time to count how many passengers belong to each of the four different groups (male children, female children, male adults, female adults). We can achieve that by setting "FUN = length".
aggregate(Survived ~ Child + Sex, data=titanic, FUN=length)
# Finally, we will use "aggregate" function again, this time to find the proportion that survived in each group. Here, "FUN" is set to a function, which we define.
aggregate(Survived ~ Child + Sex, data=titanic, FUN=function(x) {sum(x)/length(x)})
# Next we add a new column to our data frame, called "Fare2", to indicate how expensive the fare was for each passenger. We will group them into four: those who paid $30+, between 20 and 30, between 10 and 20, and less than 10.
titanic$Fare2<-"30+"
titanic$Fare2[titanic$Fare < 30 & titanic$Fare >= 20] <- "20-30"
titanic$Fare2[titanic$Fare < 20 & titanic$Fare >= 10] <- "10-20"
titanic$Fare2[titanic$Fare < 10] <- "<10"
#Finally, we check how passengers did when we group them according to their fare category, travel class, and gender. We use the "aggregate" function again.
aggregate(Survived ~ Fare2 + Pclass + Sex, data=titanic, FUN=function(x) {sum(x)/length(x)})
# BU510.650 Data Analytics Week 1
# Plotting data using R
# Example: Film death counts
# Set your working directory. In my case, it is "C:/R-Work".
setwd("C:/Users/achal/Desktop/Carey/Data Analytics/Data")
# Read the data from the file "filmdeathcounts.csv" into a data frame called "BodyCountData".
BodyCountData = read.csv("filmdeathcounts.csv")
# Let's change the names of the columns in the data frame to shorter and more descriptive names. We use "colnames" function and assign a vector of new names. The function c() indicates the list of names is a vector.
colnames(BodyCountData) <-c("Film","Year","Bodies","MPAA","Genre","Director","Minutes","IMDB")
# Let's add another column, titled "FilmCount", to our data frame and fill it with "1" for each film.
BodyCountData["FilmCount"] <- 1
# Let's add one more column, "BodyPerMin", which will show the number of bodies per minute for each film.
BodyCountData["BodyPerMin"] <- BodyCountData[,3] / BodyCountData[,7]
# We can now create a barplot that shows the total number of bodies in each year.
barplot(t1,xlab="year",ylab="Total # Bodies")
# Next, we create a table that will show the total number of bodies for each year. We use the "tapply" function. In the following line, tapply will check what values appear in the "Year" column, and for each year, it will "sum" together the numbers in the "Bodies" column of the films made in that year.
t1=tapply(BodyCountData$Bodies,BodyCountData$Year,FUN="sum")
# We can now create a barplot that shows the total number of bodies in each year.
barplot(t1,xlab="year",ylab="Total # Bodies")
# Load the library "lattice", which gives us further capabilities for plotting.
library(lattice)
# "barchart" comes with the library "lattice", for example.
barchart(t1)
# Create a new table t2, which will have our data in decreasing order of the third column, which is the number of bodies in each movie
t2 <- BodyCountData[order(BodyCountData[,3],decreasing=TRUE),]
View(t2)
# Pick only the first 10 rows of t2 - these are the top-10 movies in terms of body count
t2 <- t2[1:10,]
# Pick only the first columns of t2
t2<-t2[c(1,3)]
# Create a barchart that shows the number of bodies for each movie in t2
barchart(Film ~ Bodies, data=t2)
# Use the "table" function to find out how many films fell into each MPAA category
t3 <- table(BodyCountData$MPAA)
t3
# Create an xy-plot of all movies, plotting MPAA rating on the x-axis and the body count on the y-axis
xyplot(Bodies~MPAA,data=BodyCountData,col="black")
# We could also create a boxplot to capture the same information
boxplot(Bodies~MPAA,data=BodyCountData)
# "bwplot" is the same as boxplot - it comes with the "lattice" library, which we loaded earlier
bwplot(Bodies~MPAA,data=BodyCountData)
# Create an xy-plot of all movies, plotting IMDB ratings on the x-axis and the body count on the y-axis
xyplot(Bodies~IMDB,data=BodyCountData)
# Create an xy-plot of all movies, plotting IMDB ratings on the x-axis and the "bodies per minute" on the y-axis
xyplot(BodyPerMin~IMDB,data=BodyCountData)
# Install package to read excel file
library(readxl)
# Load the excel sheet into R
hollywood <- read_excel("C:/Users/achal/Desktop/Carey/Data Analytics/Data/KEL702-XLS-ENG-1740.XLS", sheet="Exhibit 1")
summary(hollywood[c(2,3,6,4,10,15)])
#Group the movies by Genre ad MPAA
table(hollywood$Genre)
table(hollywood$MPAA)
#Determine the proportion of movies by Genre and MPAA
prop.table(table(hollywood$Genre))
prop.table(table(hollywood$MPAA))
# create a column ROI and
hollywood["ROI"] <- ((hollywood$`Total U.S. Gross`- hollywood$Budget)/hollywood$Budget)
# To determine the average of ROI fo reach Genre
aggregate(ROI ~ Genre, data=hollywood, FUN=mean)
# To determine the average of Opening Gross fo reach Genre
aggregate(`Opening Gross` ~ Genre, data=hollywood, FUN=mean)
#To create a subset of data having only comedy movies
comedymov <- hollywood[hollywood$Genre =='Comedy',]
#To create a Boxplot
boxplot(ROI~MPAA,data=comedymov)
# read the data into an R data.frame called my.ad
my.ad<-read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Data/Advertising.csv")
# let us see the first six rows of the data
head(my.ad)
# let us see the last six rows of the data
tail(my.ad)
# the following will remove rows 2 through 5 and will assign the result to a new data.frame called my.ad2
my.ad2 <- my.ad[-(2:5),]
# the following will remove rows 2, 5, and 10 and will assign the result to a new data.frame called my.ad3
my.ad3 <- my.ad[-c(2,5,10),]
# the following will remove column 1 nd will assign the result to a new data.frame called my.ad4
my.ad4 <- my.ad[,-1]
# check the first six rows of my.ad4
head(my.ad4)
# the command par(mfrow=c(x,y)) divides plot space into x rows and y columns. Used to see multiple graphs together
par(mfrow=c(1,1))
# plot Sales versus TV budget
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
par(mfrow=c(2,2))
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
par(mfrow=c(4,1))
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
par(mfrow=c(1,1))
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
par(mfrow=c(2,2))
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
par(mfrow=c(1,2))
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
plot(my.ad$TV,my.ad$sales,xlab = "TV",ylab = "Sales")
plot(my.ad$radio,my.ad$sales,xlab = "TV",ylab = "Sales")
# run a regression of Sales wrt TV budget. lm-linear model, sales-y, tv-x
my.lm=lm(sales~TV,data=my.ad)
summary(my.lm)
plot(my.ad$newspaper,my.ad$sales,xlab = "TV",ylab = "Sales")
# plot Sales versus Newspaper budget
par(mfrow=c(1,1))
plot(my.ad$newspaper,my.ad$sales,xlab = "TV",ylab = "Sales")
# run a regression of Sales wrt Newspaper budget
my.lm1=lm(sales~newspaper,data=my.ad)
summary(my.lm1)
# plot Sales versus Newspaper budget
par(mfrow=c(1,1))
plot(my.ad$newspaper,my.ad$sales,xlab = "TV",ylab = "Sales")
# run a regression of Sales wrt Newspaper budget
my.lm1=lm(sales~newspaper,data=my.ad)
summary(my.lm1)
# Regression with TV only
my.lm.1=lm(sales~TV, data=my.ad)
summary(my.lm.1)
# Regression with Radio only
my.lm.2=lm(sales~radio, data=my.ad)
summary(my.lm.2)
# Regression with Newspaper only
my.lm.3=lm(sales~newspaper, data=my.ad)
summary(my.lm.3)
# Regression with TV and Radio
my.lm.4=lm(sales~TV+radio, data=my.ad)
summary(my.lm.4)
# Regression with TV, Radio, and Newspaper
my.lm.5=lm(sales~TV+radio+newspaper, data=my.ad)
summary(my.lm.5)
#Use a normal probability plot to check whether residuals follow a normal distribution
qqnorm(my.lm.4$res)
qqline(my.lm.4$res)
#Plot residuals versus fitted values to check whether all the variances of the residuals are equal
plot(my.lm.4$res ~ my.lm.4$fitted)
#Plot residuals in the order of the data to check if there is any pattern associated with the order of data collection (assuming that the order of the data is the order of data collection)
plot(my.lm.4$res)
plot(my.lm.4$res ~ my.ad$TV)
plot(my.lm.4$res ~ my.ad$radio)
# The following yields a prediction along with a 95% confidence interval around it
predict(lm(sales~TV+radio, data=my.ad), data.frame(TV=100, radio=50), interval="confidence")
# The following yields a prediction along with a 95% prediction interval around it
predict(lm(sales~TV+radio, data=my.ad), data.frame(TV=100, radio=50), interval="prediction")
my.lm.6=lm(sales~TV+radio+TV*radio, data=my.ad)
predict(lm(sales~TV+radio+TV*radio, data=my.ad), interval="prediction")
# read the data in Hollywood_rules into data.frame called Hollywood_rules
Hollywood_rules <- read_excel("Hollywood_rules.xls", sheet = "Exhibit 1")
library(readxl)
# Load the excel sheet into R
hollywood <- read_excel("C:/Users/achal/Desktop/Carey/Data Analytics/Data/KEL702-XLS-ENG-1740.XLS", sheet="Exhibit 1")
library(readxl)
# Load the excel sheet into R
hollywood <- read_excel("C:/Users/achal/Desktop/Carey/Data Analytics/Data/KEL702-XLS-ENG-1740.XLS", sheet="Exhibit 1")
#dummy Variable to differentiate between Conedy and Non-comedy
hollywood$comedyYes <- 0
hollywood$comedyYes[hollywood$Genre == "Comedy"] <- 1
#6a linear model having preroduction factors and opening day factors
m1<-lm(`Opening Gross`~Budget+comedyYes+MPAA_D+`Known Story`+Sequel+`Opening Theatres` + Summer + Holiday + Christmas,data=hollywood)
summary(m1)
#normality plot to check for normal distribution
qqnorm(m1$res)
plot(m1,2)
#Variance check for the model
plot(m1,1)
#Since the variance of the residual is not constant, transforming the model
mlog<-lm(log(`Opening Gross`)~Budget+comedyYes+MPAA_D+`Known Story`+Sequel+`Opening Theatres` + Summer + Holiday + Christmas,data=hollywood)
summary(mlog)
#normality plot to check for normal distribution
qqnorm(m1$res)
plot(mlog,2)
#6b-Dropping the non-sgnificant parameters
mlog1<-lm(log(`Opening Gross`)~Budget+Sequel+`Opening Theatres` + Summer,data=hollywood)
summary(mlog1)
#6d
t1 = qt(c(.025, .975), df=70)
#Confidence Interval for the coefficients estimate
c1= 4.904*10^-04
cfu =  c1 + 1.99* (7.083*10^-05) #Upper estimate
cfl =  c1 - 1.99* 7.083*10^-05 #Lower Estimate
#Point Estimate for 100 Movie theatres
OG =exp(4.904*(10^-04)*100) # OG for 100 theatres
#Task 1. Import the dataset
credit <- read.csv("C:/Users/achal/Desktop/Carey/Data Analytics/Data/Credit.csv")
#Fit a linear model using balance as the response and 4 predictors
lm.credit4 <- lm(Balance ~ Income + Limit + Cards + Student, data=credit)
summary(lm.credit4)
#Find the RSS
lm.credit4.RSS <- sum(lm.credit4$residuals^2)
lm.credit4.RSS
SIG <- 99.56^2
#Find the AIC
AIC(lm.credit4)
#Find the BIC
AIC(lm.credit4,k=log(400))
#Fit a linear model using balance as the response and 6 predictors
lm.credit6 <- lm(Balance ~ Income + Limit + Cards + Student + Rating + Age, data=credit)
summary(lm.credit6)
#Find the RSS
lm.credit6.RSS <- sum(lm.credit6$residuals^2)
lm.credit6.RSS
lm.credit4.RSS
# load library ISLR and see what the dataframe Hitters looks like
library(ISLR)
View(Hitters)
# check the names of the columns in Hitters
names(Hitters)
# check the first five rows of Hitters
Hitters[1:5,]
# check the dimensions of Hitters (how many rows, how many columns)
dim(Hitters)
# check the names of rows in Hitters
rownames(Hitters)
# check how many missing values there are in the Salary column of Hitters
sum(is.na(Hitters$Salary))
# remove missing values from Hitters and assign it to a dataframe called Hitters2
Hitters2=na.omit(Hitters)
# check the dimension of Hitters2 (how many rows, how many columns)
dim(Hitters2)
# check how many missing values there are in the dataframe Hitters
sum(is.na(Hitters2))
# load library leaps, which has the regsubsets() command for subset selection
library(leaps)
# run regsubsets using Salary as the repsonse, all other variables as predictors, with data from Hitters2
# store the results in a variable called regfit.full. Salary~. puts all columns
regfit.full=regsubsets(Salary~., data = Hitters2)
summary(regfit.full)
# if you wanted to see best subsets with up to 15 predictors
regfit.full=regsubsets(Salary~.,data=Hitters2, nvmax=15)
summary(regfit.full)
# store the sumary of results in a variable called reg.summary
reg.summary=summary(regfit.full)
# check the names of columns in reg.summary
names(reg.summary)
# display the column reg.summary$rsq
# what you see in the output is R^2 for the best subset with one predictor,
# R^2 for the best subset with two predictors, etc.
reg.summary$rsq
# display the column reg.summary$adjr2
# what you see in the output is adjusted R^2 for the best subset with one predictor,
# adjusted R^2 for the best subset with two predictors, etc.
reg.summary$adjr2
# display the column reg.summary$cp
# what you see in the output is Cp for the best subset with one predictor,
# Cp for the best subset with two predictors, etc.
reg.summary$cp
which.max(reg.summary$adjr2) # function which.max() returns the index of maximum value
coef(regfit.full,11)
# plot adjusted R^2 as a function of predictors in the model
plot(reg.summary$adjr2, xlab="Number of predictors", ylab="Adjusted R^2")
# display the number of predictors for which adjusted R^2 reaches its maximum -- it is 11
which.max(reg.summary$adjr2)
# display the coefficient estimates for the best model with 11 predictors
coef(regfit.full,11)
# plot Cp as a function of predictors in the model
plot(reg.summary$cp, xlab="Number of predictors", ylab="Cp")
# display the number of predictors for which Cp reaches its minimum -- it is 10
which.min(reg.summary$cp)
# display the coefficient estimates for the best model with 10 predictors
coef(regfit.full,10)
# run forward stepwise selection, allowing subsets with up to 19 predictors
regfit.fwd=regsubsets(Salary~.,data=Hitters2,nvmax=19, method="forward")
summary(regfit.fwd)
# run backward stepwise selection, allowing subsets with up to 19 predictors
regfit.bwd=regsubsets(Salary~.,data=Hitters2,nvmax=19, method="backward")
summary(regfit.bwd)
# the coefficient estimates for the best model with 7 predictors when using best subset selection. If computational power is not an issue select Best subset.
coef(regfit.full,7)
# the coefficient estimates for the best model with 7 predictors when using forward selection
coef(regfit.fwd,7)
# the coefficient estimates for the best model with 7 predictors when using backward selection
coef(regfit.bwd,7)
library(glmnet)
